[virtual_sdcard]
path: /home/pi/gcode_files

[pause_resume]
recover_velocity: 300.0

[display_status]

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 25.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 20.0) %}
      {% set z_safe = 20.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000
  BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 25.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 5.0) %}
      {% set z_safe = 5.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  G92 E0
  G1 E-1.0 F1500.0
  G90
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int != 0 %}
        M118 You can't resume the print without unlocking the ERCF first.
        M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
    {% else %}
        RESTORE_GCODE_STATE NAME=PAUSE_state
        G90
        {% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
            SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
        {% endif %}
        BASE_RESUME
    {% endif %}


##[gcode_macro CANCEL_PRINT]
##description: Cancel the actual running print
##rename_existing: CANCEL_PRINT_BASE
##gcode:
##    TURN_OFF_HEATERS
##    CANCEL_PRINT_BASE

##[gcode_macro PAUSE]
##rename_existing: BASE_PAUSE
##gcode:
	# Parameters
##	{% set z = params.Z|default(10)|int %}																					; z hop amount
##	
##	{% if printer['pause_resume'].is_paused|int == 0 %}		
##		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
##		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
##		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
##		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
##		BASE_PAUSE																											; pause print
##		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
##			G91																												; relative positioning
##			G1 Z{z} F900																									; raise Z up by z hop amount
##		{% else %}
##			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
##			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
##		{% endif %}
##		G90																													; absolute positioning
##		G1 X{10} Y{225} F19500									; park toolhead at front center
##		SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
##		M104 S0																												; turn off hotend
##		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
##	{% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
##[gcode_macro RESUME]
##rename_existing: BASE_RESUME
##variable_zhop: 0
##variable_etemp: 0
##gcode:
##	# Parameters
##	{% set e = params.E|default(2.5)|int %}
##	
##	{% if printer['pause_resume'].is_paused|int == 1 %}
##		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																	; enable filament sensor
##		##RESETRGB																											; reset LCD color
##		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
##		{% if etemp > 0 %}
##			M109 S{etemp|int}																								; wait for hotend to heat back up
##		{% endif %}
##		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
##		G91																													; relative positioning
##		M83																													; relative extruder positioning
##		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
##			G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
##		{% else %}						
##			G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
##		{% endif %}								
##		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
##		BASE_RESUME																											; resume print
##	{% endif %}


##[gcode_macro PAUSE]
##description: Pause the actual running print
##rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
##variable_extrude: 1.0
##gcode:
    ##### read E from pause macro #####
  ##  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    ##{% set x_park = printer.toolhead.axis_minimum.x|float - 5.0 %}
  ##  {% set x_park = 10 %}
    ##{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##  {% set y_park = 210 %}
    ##### calculate save lift position #####
  ##  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  ##  {% set act_z = printer.toolhead.position.z|float %}
  ##  {% if act_z < (max_z - 2.0) %}
  ##      {% set z_safe = 2.0 %}
  ##  {% else %}
  ##      {% set z_safe = max_z - act_z %}
  ##  {% endif %}
    ##### end of definitions #####
  ##  PAUSE_BASE
  ##  G91
  ##  {% if printer.extruder.can_extrude|lower == 'true' %}
  ##    G1 E-{E} F2100
  ##  {% else %}
  ##    {action_respond_info("Extruder not hot enough")}
  ##  {% endif %}
  ##  {% if "xyz" in printer.toolhead.homed_axes %}
  ##    G1 Z{z_safe} F900
  ##    G90
  ##    G1 X{x_park} Y{y_park} F6000
  ##  {% else %}
  ##    {action_respond_info("Printer not homed")}
  ##  {% endif %} 
    
##[gcode_macro RESUME]
##description: Resume the actual running print
##rename_existing: RESUME_BASE
##gcode:
    ##### read E from pause macro #####
##    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
##    {% if 'VELOCITY' in params|upper %}
##      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
##    {%else %}
##      {% set get_params = "" %}
##    {% endif %}
    ##### end of definitions #####
##    {% if printer.extruder.can_extrude|lower == 'true' %}
##      G91
##      G1 E{E} F2100
##    {% else %}
##      {action_respond_info("Extruder not hot enough")}
##    {% endif %}  
##    RESUME_BASE {get_params}